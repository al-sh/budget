{"version":3,"file":"static/js/423.2c97b9de.chunk.js","mappings":"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","sources":["components/settings/SyncPage.tsx","constants/api-routes.ts","services/Api.ts"],"sourcesContent":["import { Button, notification } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { API_ROUTES } from '../../constants/api-routes';\r\nimport { LocalAccount } from '../../server/types/accounts';\r\nimport { LocalCategory } from '../../server/types/categories';\r\nimport { LocalTransaction } from '../../server/types/transactions';\r\nimport { getApi } from '../../services/Api';\r\nimport { formatDateTechnical } from '../../utils/format';\r\nimport { BaseResponse } from '../../server/types/api';\r\nimport { SyncSaveResult } from '../../server/types/sync';\r\n\r\nconst downloadToFile = (content: string, filename: string, contentType: string) => {\r\n  const a = document.createElement('a');\r\n  const file = new Blob([content], { type: contentType });\r\n\r\n  a.href = URL.createObjectURL(file);\r\n  a.download = filename;\r\n  a.click();\r\n\r\n  URL.revokeObjectURL(a.href);\r\n};\r\n\r\nconst sendFile = async (endpoint: string, file: File) => {\r\n  const formData = new FormData();\r\n  file && formData.append('fileData', file);\r\n  const api = getApi();\r\n\r\n  const res = await api.send({\r\n    endpoint: endpoint,\r\n    method: 'POST',\r\n    isFile: true,\r\n    data: formData,\r\n  });\r\n};\r\n\r\nconst SyncPage: React.FC = () => {\r\n  const [fileToLoad, setFileToLoad] = useState<File | undefined>(undefined);\r\n  const api = getApi();\r\n  const handleSendFile = async () => {\r\n    fileToLoad && (await sendFile(API_ROUTES.SYNC + '/upload/categories', fileToLoad));\r\n  };\r\n  const handleSendAccountsFile = async () => {\r\n    fileToLoad && (await sendFile(API_ROUTES.SYNC + '/upload/accounts', fileToLoad));\r\n  };\r\n  const handleSendTransactionsFile = async () => {\r\n    fileToLoad && (await sendFile(API_ROUTES.SYNC + '/upload/transactions', fileToLoad));\r\n  };\r\n\r\n  const handleSaveFromStorage = async () => {\r\n    const storageData = {\r\n      accounts: JSON.parse(localStorage.accounts),\r\n      categories: JSON.parse(localStorage.categories),\r\n      transactions: JSON.parse(localStorage.transactions),\r\n    };\r\n    const res = await api.send<SyncSaveResult, any>({\r\n      endpoint: API_ROUTES.SYNC + '/upload/all/raw',\r\n      method: 'POST',\r\n      data: storageData,\r\n    });\r\n\r\n    notification.info({\r\n      message:\r\n        `Количество ошибок: ${res.errors.length} \\n ` +\r\n        `Импортировано счетов: ${res.imported?.accounts} \\n` +\r\n        `Импортировано категорий: ${res.imported?.categories} \\n` +\r\n        `Импортировано транзакций: ${res.imported?.transactions}`,\r\n    });\r\n  };\r\n  const handleAllFile = async () => {\r\n    fileToLoad && (await sendFile(API_ROUTES.SYNC + '/upload/all/file', fileToLoad));\r\n  };\r\n\r\n  const handleGetFromBack = async () => {\r\n    const res = await api.send<{ accounts: LocalAccount[]; categories: LocalCategory[]; transactions: LocalTransaction[] }>({\r\n      endpoint: API_ROUTES.SYNC + '/download/all',\r\n      method: 'GET',\r\n    });\r\n\r\n    console.log(res);\r\n    localStorage.accounts = JSON.stringify(res.accounts);\r\n    localStorage.categories = JSON.stringify(res.categories);\r\n    localStorage.transactions = JSON.stringify(res.transactions);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Синхронизация</h2>\r\n      <input\r\n        type=\"file\"\r\n        id=\"file\"\r\n        name=\"file\"\r\n        onChange={(evt) => {\r\n          if (evt.target.files && evt.target.files[0]) {\r\n            setFileToLoad(evt.target.files[0]);\r\n          }\r\n        }}\r\n      />\r\n      <h3>Категории</h3>\r\n      <div>\r\n        <Button onClick={handleSendFile}>Загрузить</Button>\r\n      </div>\r\n      <h3 style={{ marginTop: 30 }}>Счета</h3>\r\n      <div>\r\n        <span>\r\n          <Button onClick={handleSendAccountsFile}>Загрузить</Button>\r\n        </span>\r\n      </div>\r\n      <h3 style={{ marginTop: 30 }}>Транзакции</h3>\r\n      <div>\r\n        <Button onClick={handleSendTransactionsFile}>Загрузить</Button>\r\n      </div>\r\n\r\n      <h3 style={{ marginTop: 30 }}>Всё сразу - файлы</h3>\r\n      <div>\r\n        <Button\r\n          onClick={async () => {\r\n            const res = await api.send({\r\n              endpoint: API_ROUTES.SYNC + '/download/all',\r\n              method: 'GET',\r\n            });\r\n            downloadToFile(JSON.stringify(res as string), `budget_${formatDateTechnical(new Date())}.json`, 'text/plain');\r\n          }}\r\n        >\r\n          Выгрузить\r\n        </Button>\r\n        <Button onClick={handleAllFile}>Загрузить</Button>\r\n      </div>\r\n\r\n      <h3 style={{ marginTop: 30 }}>Всё сразу - storage</h3>\r\n      <div>\r\n        <Button onClick={handleSaveFromStorage}>Сохранить</Button>\r\n        <Button onClick={handleGetFromBack}>Получить</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SyncPage;\r\n","export const API_ROUTES = {\r\n  ACCOUNTS: 'accounts',\r\n  AUTH: 'auth',\r\n  CATEGORIES: 'categories',\r\n  SYNC: 'sync',\r\n  STATISTICS: 'statistics',\r\n  TRANSACTIONS: 'transactions',\r\n};\r\n","import axios, { AxiosError, AxiosPromise, AxiosRequestHeaders } from 'axios';\r\nimport { getStorage } from './Storage';\r\nimport { UI_ROUTES } from '../constants/urls';\r\n\r\ninterface ApiRequest<ReqBody, ReqQuery> {\r\n  endpoint: string;\r\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n  data?: ReqBody;\r\n  query?: ReqQuery;\r\n  isFile?: boolean;\r\n}\r\n\r\nexport type ApiResponse<T = Record<string, unknown>> = AxiosPromise<T>;\r\n\r\nexport class ApiService {\r\n  private static instance: ApiService;\r\n\r\n  public static getInstance(): ApiService {\r\n    if (!ApiService.instance) {\r\n      console.log('ApiService - create');\r\n      ApiService.instance = new ApiService();\r\n    }\r\n\r\n    return ApiService.instance;\r\n  }\r\n\r\n  private constructor() {\r\n    console.log('ApiService create. path:', this.path);\r\n  }\r\n\r\n  private path = `${window.location.origin}/api`;\r\n\r\n  public send: <Result, RequestBody = null, RequestQuery = null>(request: ApiRequest<RequestBody, RequestQuery>) => Promise<Result> =\r\n    async (request) => {\r\n      const { endpoint, method, data, query, isFile } = request;\r\n      const url = `${this.path}/${endpoint}`;\r\n\r\n      const headers: AxiosRequestHeaders = { Auth: getStorage().getItem('token'), UserId: getStorage().getItem('userId') };\r\n      if (isFile) {\r\n        headers['Content-Type'] = 'multipart/form-data';\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          data,\r\n          headers: headers,\r\n          method,\r\n          params: query,\r\n          url,\r\n        })\r\n          .then((response) => {\r\n            resolve(response.data);\r\n          })\r\n          .catch((error: AxiosError) => {\r\n            console.log(error.response);\r\n            if (error.response && error.response?.status === 401) {\r\n              console.log('redirected to login');\r\n              window.location.href = `${window.location.origin}${UI_ROUTES.SETTINGS.LOGIN}`;\r\n            }\r\n            reject(error);\r\n          });\r\n      });\r\n    };\r\n}\r\n\r\nexport const getApi = () => ApiService.getInstance();\r\n"],"names":["downloadToFile","content","filename","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","revokeObjectURL","sendFile","endpoint","formData","FormData","append","api","getApi","send","method","isFile","data","useState","undefined","fileToLoad","setFileToLoad","handleSendFile","API_ROUTES","handleSendAccountsFile","handleSendTransactionsFile","handleSaveFromStorage","storageData","accounts","JSON","parse","localStorage","categories","transactions","res","notification","message","errors","length","imported","handleAllFile","handleGetFromBack","console","log","stringify","id","name","onChange","evt","target","files","onClick","style","marginTop","formatDateTechnical","Date","ACCOUNTS","AUTH","CATEGORIES","SYNC","STATISTICS","TRANSACTIONS","ApiService","path","window","location","origin","request","query","url","headers","Auth","getStorage","getItem","UserId","Promise","resolve","reject","axios","params","then","response","catch","error","status","UI_ROUTES","this","instance","getInstance"],"sourceRoot":""}