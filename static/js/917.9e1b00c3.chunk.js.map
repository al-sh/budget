{"version":3,"file":"static/js/917.9e1b00c3.chunk.js","mappings":"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","sources":["components/_shared/_base/Select.tsx","components/_shared/selects/CategoriesSelect.tsx","hooks/useTransactionTypes.ts","components/_shared/selects/TransactionTypeSelect.tsx","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","components/settings/categories/CategoriesList.tsx","components/settings/categories/CategoryNewForm.tsx","components/settings/categories/pages/CategoriesPage.tsx","stores/CategoriesStore.ts","hooks/useCategories.ts"],"sourcesContent":["import { Select as AntdSelect } from 'antd';\r\nimport { ReactNode } from 'react';\r\n\r\ninterface Props {\r\n  allowClear?: boolean;\r\n  children?: ReactNode;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  value?: number;\r\n  onChange?: (newValue: number) => void;\r\n}\r\n\r\nexport const Select: React.FC<Props> = ({ allowClear, children, disabled, loading, value, onChange }) => {\r\n  return (\r\n    <AntdSelect allowClear={allowClear} disabled={disabled} loading={loading} value={value != 0 ? value : undefined} onChange={onChange}>\r\n      {children}\r\n    </AntdSelect>\r\n  );\r\n};\r\n\r\nexport const SelectOption: React.FC<{ value?: string | number }> = ({ children }) => <AntdSelect.Option>{children}</AntdSelect.Option>;\r\n","import { TreeSelect } from 'antd';\r\nimport { useCategories } from '../../../hooks/useCategories';\r\nimport { ETRANSACTION_TYPE } from '../../../server/types/transactions';\r\n\r\ninterface Props {\r\n  onChange?: (newValue: number) => void;\r\n  typeId?: ETRANSACTION_TYPE;\r\n  value?: number;\r\n  allowClear?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const CategoriesSelect: React.VFC<Props> = ({ typeId, onChange, value, allowClear, disabled }) => {\r\n  const { isLoading, data: categoriesTree } = useCategories().useGetTree({ typeId: typeId });\r\n\r\n  return (\r\n    <TreeSelect\r\n      treeData={categoriesTree}\r\n      allowClear={allowClear}\r\n      loading={isLoading}\r\n      disabled={disabled || !typeId}\r\n      onChange={onChange}\r\n      value={value != 0 ? value : undefined}\r\n      dropdownStyle={{\r\n        overflow: 'auto',\r\n      }}\r\n      treeDefaultExpandAll\r\n    />\r\n  );\r\n};\r\n","import { useQuery } from 'react-query';\r\nimport { LocalTransactionType } from '../server/types/categories';\r\nimport { ETRANSACTION_TYPE } from '../server/types/transactions';\r\n\r\nexport const transactionTypesQueryKey = 'transactionTypes';\r\n\r\nconst types: LocalTransactionType[] = [\r\n  { id: ETRANSACTION_TYPE.EXPENSE, name: 'Расход' },\r\n  { id: ETRANSACTION_TYPE.INCOME, name: 'Доход' },\r\n  { id: ETRANSACTION_TYPE.RETURN_EXPENSE, name: 'Возврат расхода' },\r\n  { id: ETRANSACTION_TYPE.RETURN_INCOME, name: 'Возврат дохода' },\r\n  { id: ETRANSACTION_TYPE.TRANSFER, name: 'Перевод между своими счетами' },\r\n];\r\n\r\nconst getTypes = (hideReturns: boolean) =>\r\n  new Promise<LocalTransactionType[]>((resolve) => {\r\n    if (hideReturns) {\r\n      resolve(types.filter((type) => type.id !== ETRANSACTION_TYPE.RETURN_EXPENSE && type.id !== ETRANSACTION_TYPE.RETURN_INCOME));\r\n    } else {\r\n      resolve(types);\r\n    }\r\n  });\r\n\r\nexport const useTransactionTypes = (hideReturns?: boolean) =>\r\n  useQuery([transactionTypesQueryKey, hideReturns], () => getTypes(!!hideReturns));\r\n","import { useTransactionTypes } from '../../../hooks/useTransactionTypes';\r\nimport { Select, SelectOption } from '../_base/Select';\r\n\r\ninterface Props {\r\n  allowClear?: boolean;\r\n  onChange?: (newValue: number) => void;\r\n  value?: number;\r\n  hideReturns?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const TransactionTypeSelect: React.VFC<Props> = ({ allowClear, value, hideReturns, disabled, onChange }) => {\r\n  const { isLoading: isTranTypesLoading, data: tranTypes } = useTransactionTypes(hideReturns);\r\n  return (\r\n    <Select allowClear={allowClear} loading={isTranTypesLoading} onChange={onChange} value={value} disabled={disabled}>\r\n      {tranTypes?.length &&\r\n        tranTypes?.map((tran) => (\r\n          <SelectOption key={tran.id} value={tran.id}>\r\n            {tran.name}\r\n          </SelectOption>\r\n        ))}\r\n    </Select>\r\n  );\r\n};\r\n","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\n\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);","import { EditOutlined } from '@ant-design/icons';\r\nimport { Tree } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { UI_ROUTES } from '../../../constants/urls';\r\nimport { useCategories } from '../../../hooks/useCategories';\r\nimport { ETRANSACTION_TYPE } from '../../../server/types/transactions';\r\nimport { Loader } from '../../_shared/Loader';\r\n\r\nconst CategoriesListWrapper = styled.div`\r\n  margin-bottom: 1em;\r\n\r\n  .ant-tree .ant-tree-node-content-wrapper {\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\nconst CategoryName = styled.span<{ active: boolean }>`\r\n  color: ${({ theme, active }) => (active ? theme.text.primary : theme.text.inactive)};\r\n`;\r\n\r\nconst EditIcon = styled(EditOutlined)`\r\n  margin-left: 0.5em;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const CategoriesList: React.VFC<{ showHidden?: boolean; typeId: ETRANSACTION_TYPE }> = ({ showHidden, typeId }) => {\r\n  const navigate = useNavigate();\r\n  const { useGetTree } = useCategories();\r\n\r\n  const { isLoading, isError, data: categoriesTree } = useGetTree({ showHidden: !!showHidden, typeId: typeId });\r\n\r\n  if (isLoading) return <Loader />;\r\n  if (isError) return <>Error</>;\r\n\r\n  return (\r\n    <>\r\n      <CategoriesListWrapper>\r\n        <Tree\r\n          treeData={categoriesTree}\r\n          selectable={false}\r\n          titleRender={(item) => (\r\n            <span>\r\n              <CategoryName active={!!item.isActive}>\r\n                {item.title}\r\n                <EditIcon\r\n                  onClick={() => {\r\n                    navigate(`${UI_ROUTES.SETTINGS.CATEGORIES}/${item.key}`);\r\n                  }}\r\n                />\r\n              </CategoryName>\r\n            </span>\r\n          )}\r\n        />\r\n      </CategoriesListWrapper>\r\n    </>\r\n  );\r\n};\r\n","import { Form, Input, Button } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { UI_ROUTES } from '../../../constants/urls';\r\nimport { useCategories } from '../../../hooks/useCategories';\r\nimport { ETRANSACTION_TYPE } from '../../../server/types/transactions';\r\nimport { CategoriesSelect } from '../../_shared/selects/CategoriesSelect';\r\nimport { TransactionTypeSelect } from '../../_shared/selects/TransactionTypeSelect';\r\n\r\nexport const CategoryNewForm: React.VFC<{ onFinish: () => void }> = ({ onFinish }) => {\r\n  const { useCreate } = useCategories();\r\n  const query = useCreate();\r\n  const navigate = useNavigate();\r\n\r\n  const [form] = Form.useForm();\r\n  const [typeId, setTypeId] = useState(ETRANSACTION_TYPE.EXPENSE);\r\n\r\n  return (\r\n    <div>\r\n      <div>Новая категория</div>\r\n\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{\r\n          span: 8,\r\n        }}\r\n        form={form}\r\n        layout=\"vertical\"\r\n        wrapperCol={{\r\n          span: 16,\r\n        }}\r\n        initialValues={{\r\n          initialValue: 0,\r\n          name: '',\r\n          type: { id: ETRANSACTION_TYPE.EXPENSE },\r\n          order: 1,\r\n        }}\r\n        onValuesChange={() => {\r\n          setTypeId(form.getFieldValue(['type', 'id']));\r\n        }}\r\n        onFinish={(formValues) => {\r\n          query.mutate(formValues);\r\n          console.log('query.isSuccess', formValues);\r\n          navigate(UI_ROUTES.SETTINGS.CATEGORIES);\r\n          onFinish();\r\n        }}\r\n        autoComplete=\"off\"\r\n      >\r\n        <Form.Item\r\n          label=\"Название\"\r\n          name=\"name\"\r\n          rules={[\r\n            {\r\n              message: 'Введите название категории',\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Тип\"\r\n          name={['type', 'id']}\r\n          rules={[\r\n            {\r\n              message: 'Укажите тип категории',\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <TransactionTypeSelect hideReturns />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Родительская категория\" name={['parentCategory', 'id']}>\r\n          <CategoriesSelect typeId={typeId} allowClear />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          wrapperCol={{\r\n            offset: 8,\r\n            span: 16,\r\n          }}\r\n        >\r\n          <Button type=\"primary\" htmlType=\"submit\" disabled={query.isLoading}>\r\n            Сохранить\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      {query.isLoading && <div>Сохранение данных...</div>}\r\n    </div>\r\n  );\r\n};\r\n","import { Button, Tabs } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { ETRANSACTION_TYPE } from '../../../../server/types/transactions';\r\nimport { CategoriesList } from '../CategoriesList';\r\nimport { CategoryNewForm } from '../CategoryNewForm';\r\n\r\nexport const CategoriesPage: React.VFC = () => {\r\n  const [isAdd, setIsAdd] = useState(false);\r\n  const [typeId, setTypeId] = useState(ETRANSACTION_TYPE.EXPENSE);\r\n  const [showHidden, setShowHidden] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <h2>Категории</h2>\r\n      <Tabs\r\n        defaultActiveKey={String(ETRANSACTION_TYPE.EXPENSE)}\r\n        onChange={(activeKey) => {\r\n          setTypeId(parseInt(activeKey));\r\n        }}\r\n      >\r\n        <Tabs.TabPane tab=\"Расходы\" key={String(ETRANSACTION_TYPE.EXPENSE)} />\r\n\r\n        <Tabs.TabPane tab=\"Доходы\" key={String(ETRANSACTION_TYPE.INCOME)} />\r\n      </Tabs>\r\n      <CategoriesList showHidden={showHidden} typeId={typeId} />\r\n      {!showHidden && (\r\n        <Button\r\n          onClick={() => {\r\n            setShowHidden(true);\r\n          }}\r\n        >\r\n          Показать скрытые\r\n        </Button>\r\n      )}\r\n      <Button\r\n        onClick={() => {\r\n          setIsAdd(true);\r\n        }}\r\n      >\r\n        Добавить\r\n      </Button>\r\n      {isAdd && (\r\n        <CategoryNewForm\r\n          onFinish={() => {\r\n            setIsAdd(false);\r\n          }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoriesPage;\r\n","import { v4 } from 'uuid';\r\nimport { Category } from '../server/entity/Category';\r\nimport { LocalCategory, LocalCategoryTreeItem } from '../server/types/categories';\r\nimport { ETRANSACTION_TYPE } from '../server/types/transactions';\r\nimport { getLocalDataService } from '../services/LocalDataService';\r\nimport { formatDateISOstr } from '../utils/format';\r\n\r\nclass CategoriesStore {\r\n  private static instance: CategoriesStore;\r\n\r\n  public static getInstance(): CategoriesStore {\r\n    if (!CategoriesStore.instance) {\r\n      CategoriesStore.instance = new CategoriesStore();\r\n    }\r\n\r\n    return CategoriesStore.instance;\r\n  }\r\n\r\n  private _localDataService = getLocalDataService();\r\n\r\n  public create = (formValues: Category) =>\r\n    new Promise<void>((resolve) => {\r\n      const categories = this._localDataService.categories;\r\n      categories.push({\r\n        id: v4(),\r\n        isActive: formValues.isActive ? formValues.isActive : true,\r\n        mpath: '',\r\n        name: formValues.name ? formValues.name : '',\r\n        order: formValues.order ? formValues.order : 0,\r\n        parentCategoryId: formValues.parentCategory?.id ? formValues.parentCategory.id : null,\r\n        typeId: formValues.type?.id ? formValues.type?.id : ETRANSACTION_TYPE.EXPENSE,\r\n      });\r\n      this._localDataService.categories = categories.sort((a, b) => a.order - b.order);\r\n      resolve();\r\n    });\r\n\r\n  public delete = (id: string) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      const categories = this._localDataService.categories;\r\n      const catToUpdateIdx = categories.findIndex((item) => item.id === id);\r\n\r\n      if (catToUpdateIdx === -1) {\r\n        reject('category delete, id not found:' + id);\r\n        return;\r\n      }\r\n\r\n      const transactions = this._localDataService.transactions;\r\n      const catTransactions = transactions.filter((tran) => tran.categoryId === id);\r\n\r\n      if (catTransactions.length) {\r\n        alert(\r\n          'Счет сделан неактивным, а не удалён, т.к. по счету были найдены транзакции. \\nДаты:\\n' +\r\n            catTransactions.map((tran) => formatDateISOstr(tran.dt)).join('\\n')\r\n        );\r\n        categories[catToUpdateIdx].isActive = false;\r\n      } else {\r\n        console.log('category delete', catToUpdateIdx);\r\n        categories.splice(catToUpdateIdx, 1);\r\n      }\r\n\r\n      this._localDataService.categories = categories;\r\n\r\n      resolve();\r\n    });\r\n\r\n  public getOne = (id: string) => {\r\n    const categories = this._localDataService.categories;\r\n    return categories.find((item) => item.id === id);\r\n  };\r\n\r\n  public getTree = (typeId?: ETRANSACTION_TYPE, showHidden?: boolean) =>\r\n    new Promise<LocalCategoryTreeItem[]>((resolve) => {\r\n      const rawCategories = this._localDataService.categories;\r\n      const categories = rawCategories.filter((cat) => {\r\n        let show = true;\r\n        if (typeId) {\r\n          let transformedTypeId = typeId;\r\n          if (typeId === ETRANSACTION_TYPE.RETURN_EXPENSE) {\r\n            transformedTypeId = ETRANSACTION_TYPE.EXPENSE;\r\n          }\r\n          if (typeId === ETRANSACTION_TYPE.RETURN_INCOME) {\r\n            transformedTypeId = ETRANSACTION_TYPE.INCOME;\r\n          }\r\n          if (cat.typeId !== transformedTypeId) {\r\n            show = false;\r\n          }\r\n        }\r\n        if (!showHidden && !cat.isActive) {\r\n          show = false;\r\n        }\r\n        return show;\r\n      });\r\n      const rootCategories = categories.filter((cat) => cat.parentCategoryId === null);\r\n      const categoriesTree: LocalCategoryTreeItem[] = rootCategories.map((rootCat) => {\r\n        const children: LocalCategoryTreeItem[] = categories\r\n          .filter((cat) => rootCat.id === cat.parentCategoryId)\r\n          .map((item) => this.transformCategoryToTreeItem(item));\r\n        return { ...this.transformCategoryToTreeItem(rootCat), children: children };\r\n      });\r\n      resolve(categoriesTree);\r\n    });\r\n\r\n  private transformCategoryToTreeItem: (cat: LocalCategory) => LocalCategoryTreeItem = (cat: LocalCategory) => {\r\n    return { id: cat.id, key: cat.id, value: cat.id, isActive: cat.isActive, title: cat.name };\r\n  };\r\n\r\n  public update = (id: string, formValues: LocalCategory) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      const categories = this._localDataService.categories;\r\n      const categoryToUpdateIdx = categories.findIndex((item) => item.id === id);\r\n      if (categoryToUpdateIdx === -1) {\r\n        console.error('categoryToUpdateIdx not found', id, formValues);\r\n        reject();\r\n        return;\r\n      }\r\n      categories.splice(categoryToUpdateIdx, 1);\r\n      categories.push({ ...formValues, id: id });\r\n      this._localDataService.categories = categories.sort((a, b) => a.order - b.order);\r\n      resolve();\r\n    });\r\n}\r\n\r\nexport const getCategoriesStore = () => CategoriesStore.getInstance();\r\n","import { useMutation, useQuery, useQueryClient } from 'react-query';\r\nimport { Category } from '../server/entity/Category';\r\nimport { LocalCategory } from '../server/types/categories';\r\nimport { ETRANSACTION_TYPE } from '../server/types/transactions';\r\nimport { getCategoriesStore } from '../stores/CategoriesStore';\r\n\r\nexport const categoriesQueryKey = 'categories';\r\n\r\nexport const useCategories = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  const categoriesStore = getCategoriesStore();\r\n\r\n  const useGetTree = (params: { showHidden?: boolean; typeId?: ETRANSACTION_TYPE }) => {\r\n    const { typeId, showHidden } = params;\r\n\r\n    return useQuery([categoriesQueryKey, 'tree', typeId, showHidden], () => categoriesStore.getTree(typeId, showHidden));\r\n  };\r\n\r\n  const useGetOne = (id: string) =>\r\n    useQuery([categoriesQueryKey, id], () => categoriesStore.getOne(id), {\r\n      enabled: !!id,\r\n    });\r\n\r\n  const useItem = (method: 'PUT' | 'DELETE', id: string, onSuccess?: () => void) =>\r\n    useMutation(\r\n      (formValues: Record<string, unknown>) => {\r\n        return method === 'PUT' ? categoriesStore.update(id, formValues as unknown as LocalCategory) : categoriesStore.delete(id);\r\n      },\r\n      {\r\n        onSuccess: async () => {\r\n          console.log('useItem onSuccess', method);\r\n          await queryClient.cancelQueries(categoriesQueryKey);\r\n          queryClient.invalidateQueries([categoriesQueryKey, id]);\r\n          queryClient.invalidateQueries(categoriesQueryKey);\r\n          onSuccess && onSuccess();\r\n        },\r\n      }\r\n    );\r\n\r\n  const useCreate = () =>\r\n    useMutation(\r\n      (formValues: Category) => {\r\n        return categoriesStore.create(formValues);\r\n      },\r\n      {\r\n        onSuccess: () => {\r\n          queryClient.invalidateQueries(categoriesQueryKey);\r\n        },\r\n      }\r\n    );\r\n\r\n  return { useCreate, useGetTree, useGetOne, useItem };\r\n};\r\n"],"names":["Select","allowClear","children","disabled","loading","value","onChange","undefined","SelectOption","CategoriesSelect","typeId","useCategories","useGetTree","isLoading","categoriesTree","data","treeData","dropdownStyle","overflow","treeDefaultExpandAll","types","id","ETRANSACTION_TYPE","name","useTransactionTypes","hideReturns","useQuery","Promise","resolve","filter","type","getTypes","TransactionTypeSelect","isTranTypesLoading","tranTypes","length","map","tran","EditOutlined","props","ref","React","AntdIcon","_objectSpread","icon","EditOutlinedSvg","displayName","CategoriesListWrapper","styled","CategoryName","theme","active","text","primary","inactive","EditIcon","CategoriesList","showHidden","navigate","useNavigate","isError","Loader","selectable","titleRender","item","isActive","title","onClick","UI_ROUTES","key","CategoryNewForm","onFinish","query","useCreate","Form","form","useState","setTypeId","labelCol","span","layout","wrapperCol","initialValues","initialValue","order","onValuesChange","getFieldValue","formValues","mutate","console","log","autoComplete","label","rules","message","required","offset","htmlType","CategoriesPage","isAdd","setIsAdd","setShowHidden","defaultActiveKey","String","activeKey","parseInt","tab","CategoriesStore","_localDataService","getLocalDataService","create","categories","push","v4","mpath","parentCategoryId","parentCategory","sort","a","b","delete","reject","catToUpdateIdx","findIndex","catTransactions","transactions","categoryId","alert","formatDateISOstr","dt","join","splice","getOne","find","getTree","cat","show","transformedTypeId","rootCat","transformCategoryToTreeItem","update","categoryToUpdateIdx","error","instance","categoriesQueryKey","queryClient","useQueryClient","categoriesStore","getInstance","useMutation","onSuccess","invalidateQueries","params","useGetOne","enabled","useItem","method","cancelQueries"],"sourceRoot":""}