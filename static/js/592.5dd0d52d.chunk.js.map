{"version":3,"file":"static/js/592.5dd0d52d.chunk.js","mappings":"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","sources":["components/settings/LoginPage.tsx","constants/api-routes.ts","services/Api.ts"],"sourcesContent":["import { notification } from 'antd';\r\nimport React, { useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { UI_ROUTES } from '../../constants/urls';\r\nimport { AuthPasswordRequest, AuthResponse } from '../../server/routes/auth';\r\nimport { getApi } from '../../services/Api';\r\nimport { getStorage } from '../../services/Storage';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { API_ROUTES } from '../../constants/api-routes';\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const api = getApi();\r\n  const storage = getStorage();\r\n  const navigate = useNavigate();\r\n\r\n  const handleFinish = useCallback(\r\n    async (formValues: AuthPasswordRequest['body']) => {\r\n      try {\r\n        const response = await api.send<AuthResponse, AuthPasswordRequest['body']>({\r\n          data: formValues,\r\n          endpoint: API_ROUTES.AUTH + '/password',\r\n          method: 'POST',\r\n        });\r\n        console.log('response: ', response);\r\n        storage.setItem('token', response.token);\r\n        storage.setItem('userId', String(response.userId));\r\n        navigate(UI_ROUTES.HOME);\r\n      } catch (e) {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        if (e?.response?.status === 403) {\r\n          notification.error({ message: 'Неправильный логин/пароль' });\r\n        } else {\r\n          notification.error({ message: 'Произошла ошибка авторизации. Повторите попытку позже.' });\r\n        }\r\n      }\r\n    },\r\n    [api, navigate, storage]\r\n  );\r\n\r\n  const onFinishFailed = useCallback((errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>Login</h2>\r\n      <div style={{ width: 500 }}>\r\n        <Form\r\n          name=\"basic\"\r\n          labelCol={{\r\n            span: 8,\r\n          }}\r\n          layout=\"vertical\"\r\n          wrapperCol={{\r\n            span: 16,\r\n          }}\r\n          initialValues={{\r\n            login: 'demo',\r\n            password: 'demo',\r\n          }}\r\n          onFinish={handleFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          autoComplete=\"off\"\r\n        >\r\n          <Form.Item\r\n            label=\"Логин\"\r\n            name=\"login\"\r\n            rules={[\r\n              {\r\n                message: 'Введите логин',\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Пароль\"\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                message: 'Введите пароль',\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            wrapperCol={{\r\n              offset: 8,\r\n              span: 16,\r\n            }}\r\n          >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Вход\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","export const API_ROUTES = {\r\n  ACCOUNTS: 'accounts',\r\n  AUTH: 'auth',\r\n  CATEGORIES: 'categories',\r\n  SYNC: 'sync',\r\n  STATISTICS: 'statistics',\r\n  TRANSACTIONS: 'transactions',\r\n};\r\n","import axios, { AxiosError, AxiosPromise, AxiosRequestHeaders } from 'axios';\r\nimport { getStorage } from './Storage';\r\nimport { UI_ROUTES } from '../constants/urls';\r\n\r\ninterface ApiRequest<ReqBody, ReqQuery> {\r\n  endpoint: string;\r\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n  data?: ReqBody;\r\n  query?: ReqQuery;\r\n  isFile?: boolean;\r\n}\r\n\r\nexport type ApiResponse<T = Record<string, unknown>> = AxiosPromise<T>;\r\n\r\nexport class ApiService {\r\n  private static instance: ApiService;\r\n\r\n  public static getInstance(): ApiService {\r\n    if (!ApiService.instance) {\r\n      console.log('ApiService - create');\r\n      ApiService.instance = new ApiService();\r\n    }\r\n\r\n    return ApiService.instance;\r\n  }\r\n\r\n  private constructor() {\r\n    console.log('ApiService create. path:', this.path);\r\n  }\r\n\r\n  private path = `${window.location.origin}/api`;\r\n\r\n  public send: <Result, RequestBody = null, RequestQuery = null>(request: ApiRequest<RequestBody, RequestQuery>) => Promise<Result> =\r\n    async (request) => {\r\n      const { endpoint, method, data, query, isFile } = request;\r\n      const url = `${this.path}/${endpoint}`;\r\n\r\n      const headers: AxiosRequestHeaders = { Auth: getStorage().getItem('token'), UserId: getStorage().getItem('userId') };\r\n      if (isFile) {\r\n        headers['Content-Type'] = 'multipart/form-data';\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n        axios({\r\n          data,\r\n          headers: headers,\r\n          method,\r\n          params: query,\r\n          url,\r\n        })\r\n          .then((response) => {\r\n            resolve(response.data);\r\n          })\r\n          .catch((error: AxiosError) => {\r\n            console.log(error.response);\r\n            if (error.response && error.response?.status === 401) {\r\n              console.log('redirected to login');\r\n              window.location.href = `${window.location.origin}${UI_ROUTES.SETTINGS.LOGIN}`;\r\n            }\r\n            reject(error);\r\n          });\r\n      });\r\n    };\r\n}\r\n\r\nexport const getApi = () => ApiService.getInstance();\r\n"],"names":["LoginPage","api","getApi","storage","getStorage","navigate","useNavigate","handleFinish","useCallback","formValues","send","data","endpoint","API_ROUTES","method","response","console","log","setItem","token","String","userId","UI_ROUTES","status","notification","message","onFinishFailed","errorInfo","style","width","name","labelCol","span","layout","wrapperCol","initialValues","login","password","onFinish","autoComplete","label","rules","required","offset","type","htmlType","ACCOUNTS","AUTH","CATEGORIES","SYNC","STATISTICS","TRANSACTIONS","ApiService","path","window","location","origin","request","query","isFile","url","headers","Auth","getItem","UserId","Promise","resolve","reject","axios","params","then","catch","error","href","this","instance","getInstance"],"sourceRoot":""}